// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShippingSystem.Data;

#nullable disable

namespace ShippingSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "782b3d14-193f-41eb-9ee6-073bece4d59a",
                            ConcurrencyStamp = "71d18d22-856c-4434-8e40-2d63a45102b8",
                            Name = "Merchant",
                            NormalizedName = "MERCHANT"
                        },
                        new
                        {
                            Id = "98a82c8a-1d51-41c0-b17e-734e7822304d",
                            ConcurrencyStamp = "fedc935e-ad0f-4761-a006-7983b0646f0f",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2e2f1bdd-7c0b-4854-add0-ab8eec66bc23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b4a34d3-3a3b-4814-bca0-48799fa1aa6c",
                            Email = "employee@employee.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "EMPLOYEE@EMPLOYEE.COM",
                            NormalizedUserName = "EMPLOYEE@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHSQM1qAccg8Yf1d+msuWKVKCkVWk81L0zXkwZio+rZcaBlz9fCJU+PqKv5SbJbmDQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "HEEVJ4ANMTAJLV57S7ITEKAF2FHIIWBJ",
                            TwoFactorEnabled = false,
                            UserName = "employee@employee.com"
                        },
                        new
                        {
                            Id = "acc1915e-bb86-43d6-b34d-78eb7c128a00",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "43913d3f-e2df-4956-818c-79506ec9e7d4",
                            Email = "merchant@merchant.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "MERCHANT@MERCHANT.COM",
                            NormalizedUserName = "MERCHANT@MERCHANT.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECQo2ErqmLbFIrLeowLZXNPN+tNnwS7Ddn8xWxzhzHA+wpuFCjjpuIPh0QNLcJSU3g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2F2KBRLNAE2TKEP3OFJU3N5CBX4QM537",
                            TwoFactorEnabled = false,
                            UserName = "merchant@merchant.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ShippingSystem.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("AddingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Branch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddingDate = new DateTime(2022, 10, 14, 11, 37, 40, 803, DateTimeKind.Local).AddTicks(7382),
                            BranchName = "المنوفية",
                            IsActive = true
                        },
                        new
                        {
                            Id = 2,
                            AddingDate = new DateTime(2022, 10, 14, 11, 37, 40, 803, DateTimeKind.Local).AddTicks(7402),
                            BranchName = "القاهرة",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("ShippingSystem.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<decimal>("NormalCostShipping")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PickUpCostShipping")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityName = "شبين الكوم",
                            GovernorateId = 1,
                            NormalCostShipping = 10m,
                            PickUpCostShipping = 10m
                        },
                        new
                        {
                            Id = 2,
                            CityName = "الاميرية",
                            GovernorateId = 2,
                            NormalCostShipping = 10m,
                            PickUpCostShipping = 10m
                        });
                });

            modelBuilder.Entity("ShippingSystem.Models.Governorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("GovernorateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Governorate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GovernorateName = "المنوفية",
                            IsActive = true
                        },
                        new
                        {
                            Id = 2,
                            GovernorateName = "القاهرة",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("ShippingSystem.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<float>("CompanyValue")
                        .HasColumnType("real");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsVillage")
                        .HasColumnType("bit");

                    b.Property<string>("MerchantAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("OrderCost")
                        .HasColumnType("real");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<int>("OrderTypeId")
                        .HasColumnType("int");

                    b.Property<float>("PaidShippingValue")
                        .HasColumnType("real");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<float>("RecievedAmount")
                        .HasColumnType("real");

                    b.Property<string>("SecondPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ShippingCost")
                        .HasColumnType("real");

                    b.Property<int>("ShippingTypeId")
                        .HasColumnType("int");

                    b.Property<string>("StreetAndVillage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TotalWeight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CityId");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("OrderTypeId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("ShippingTypeId");

                    b.ToTable("Order");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 1,
                            CityId = 1,
                            CompanyValue = 0f,
                            CustomerName = "mahmoud",
                            Email = "m@me.com",
                            FirstPhone = "010106171222",
                            GovernorateId = 1,
                            IsVillage = false,
                            MerchantAddress = "address",
                            MerchantPhone = "12321312",
                            OrderCost = 0f,
                            OrderDate = new DateTime(2022, 10, 14, 11, 37, 40, 803, DateTimeKind.Local).AddTicks(7975),
                            OrderStatusId = 1,
                            OrderTypeId = 1,
                            PaidShippingValue = 0f,
                            PaymentTypeId = 1,
                            RecievedAmount = 0f,
                            ShippingCost = 0f,
                            ShippingTypeId = 1,
                            StreetAndVillage = "menouf",
                            TotalWeight = 0f
                        },
                        new
                        {
                            Id = 2,
                            BranchId = 1,
                            CityId = 1,
                            CompanyValue = 0f,
                            CustomerName = "mahmoud",
                            Email = "m@me.com",
                            FirstPhone = "010106171222",
                            GovernorateId = 1,
                            IsVillage = false,
                            MerchantAddress = "address",
                            MerchantPhone = "12321312",
                            OrderCost = 0f,
                            OrderDate = new DateTime(2022, 10, 14, 11, 37, 40, 803, DateTimeKind.Local).AddTicks(7990),
                            OrderStatusId = 1,
                            OrderTypeId = 1,
                            PaidShippingValue = 0f,
                            PaymentTypeId = 1,
                            RecievedAmount = 0f,
                            ShippingCost = 0f,
                            ShippingTypeId = 1,
                            StreetAndVillage = "menouf",
                            TotalWeight = 0f
                        },
                        new
                        {
                            Id = 3,
                            BranchId = 1,
                            CityId = 1,
                            CompanyValue = 0f,
                            CustomerName = "mahmoud",
                            Email = "m@me.com",
                            FirstPhone = "010106171222",
                            GovernorateId = 1,
                            IsVillage = false,
                            MerchantAddress = "address",
                            MerchantPhone = "12321312",
                            OrderCost = 0f,
                            OrderDate = new DateTime(2022, 10, 14, 11, 37, 40, 803, DateTimeKind.Local).AddTicks(7998),
                            OrderStatusId = 1,
                            OrderTypeId = 1,
                            PaidShippingValue = 0f,
                            PaymentTypeId = 1,
                            RecievedAmount = 0f,
                            ShippingCost = 0f,
                            ShippingTypeId = 1,
                            StreetAndVillage = "menouf",
                            TotalWeight = 0f
                        },
                        new
                        {
                            Id = 4,
                            BranchId = 1,
                            CityId = 1,
                            CompanyValue = 0f,
                            CustomerName = "mahmoud",
                            Email = "m@me.com",
                            FirstPhone = "010106171222",
                            GovernorateId = 1,
                            IsVillage = false,
                            MerchantAddress = "address",
                            MerchantPhone = "12321312",
                            OrderCost = 0f,
                            OrderDate = new DateTime(2022, 10, 14, 11, 37, 40, 803, DateTimeKind.Local).AddTicks(8005),
                            OrderStatusId = 1,
                            OrderTypeId = 1,
                            PaidShippingValue = 0f,
                            PaymentTypeId = 1,
                            RecievedAmount = 0f,
                            ShippingCost = 0f,
                            ShippingTypeId = 1,
                            StreetAndVillage = "menouf",
                            TotalWeight = 0f
                        },
                        new
                        {
                            Id = 5,
                            BranchId = 1,
                            CityId = 1,
                            CompanyValue = 0f,
                            CustomerName = "mahmoud",
                            Email = "m@me.com",
                            FirstPhone = "010106171222",
                            GovernorateId = 1,
                            IsVillage = false,
                            MerchantAddress = "address",
                            MerchantPhone = "12321312",
                            OrderCost = 0f,
                            OrderDate = new DateTime(2022, 10, 14, 11, 37, 40, 803, DateTimeKind.Local).AddTicks(8011),
                            OrderStatusId = 1,
                            OrderTypeId = 1,
                            PaidShippingValue = 0f,
                            PaymentTypeId = 1,
                            RecievedAmount = 0f,
                            ShippingCost = 0f,
                            ShippingTypeId = 1,
                            StreetAndVillage = "menouf",
                            TotalWeight = 0f
                        },
                        new
                        {
                            Id = 6,
                            BranchId = 1,
                            CityId = 1,
                            CompanyValue = 0f,
                            CustomerName = "mahmoud",
                            Email = "m@me.com",
                            FirstPhone = "010106171222",
                            GovernorateId = 1,
                            IsVillage = false,
                            MerchantAddress = "address",
                            MerchantPhone = "12321312",
                            OrderCost = 0f,
                            OrderDate = new DateTime(2022, 10, 14, 11, 37, 40, 803, DateTimeKind.Local).AddTicks(8018),
                            OrderStatusId = 1,
                            OrderTypeId = 1,
                            PaidShippingValue = 0f,
                            PaymentTypeId = 1,
                            RecievedAmount = 0f,
                            ShippingCost = 0f,
                            ShippingTypeId = 1,
                            StreetAndVillage = "menouf",
                            TotalWeight = 0f
                        });
                });

            modelBuilder.Entity("ShippingSystem.Models.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CountStatus")
                        .HasColumnType("int");

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountStatus = 0,
                            StatusName = "جديد"
                        },
                        new
                        {
                            Id = 2,
                            CountStatus = 0,
                            StatusName = "قيد الانتظار"
                        },
                        new
                        {
                            Id = 3,
                            CountStatus = 0,
                            StatusName = "تم التسليم للمندوب"
                        },
                        new
                        {
                            Id = 4,
                            CountStatus = 0,
                            StatusName = "تم التسليم"
                        },
                        new
                        {
                            Id = 5,
                            CountStatus = 0,
                            StatusName = "لا يمكن الوصول"
                        },
                        new
                        {
                            Id = 6,
                            CountStatus = 0,
                            StatusName = "تم التأجيل"
                        },
                        new
                        {
                            Id = 7,
                            CountStatus = 0,
                            StatusName = "تم التسليم جزئيا"
                        },
                        new
                        {
                            Id = 8,
                            CountStatus = 0,
                            StatusName = "تم الالغاء من قبل المستلم"
                        },
                        new
                        {
                            Id = 9,
                            CountStatus = 0,
                            StatusName = "تم الرفض مع الدفع"
                        },
                        new
                        {
                            Id = 10,
                            CountStatus = 0,
                            StatusName = "رفض مع سداد جزء"
                        },
                        new
                        {
                            Id = 11,
                            CountStatus = 0,
                            StatusName = "رفض و لم يتم الدفع"
                        });
                });

            modelBuilder.Entity("ShippingSystem.Models.OrderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("OrderTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderTypeName = "التسليم في الفرع"
                        },
                        new
                        {
                            Id = 2,
                            OrderTypeName = "التسليم عند التاجر"
                        });
                });

            modelBuilder.Entity("ShippingSystem.Models.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "واجبة التحصيل"
                        },
                        new
                        {
                            Id = 2,
                            Type = "دفع مقدم"
                        },
                        new
                        {
                            Id = 3,
                            Type = "طرد مقابل طرد"
                        });
                });

            modelBuilder.Entity("ShippingSystem.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ProductWeight")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            ProductName = "new product",
                            ProductWeight = 20.5f,
                            Quantity = 5
                        });
                });

            modelBuilder.Entity("ShippingSystem.Models.ShippingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ShippingType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "شحن عادي"
                        },
                        new
                        {
                            Id = 2,
                            Type = "شحن في 24 ساعة"
                        },
                        new
                        {
                            Id = 3,
                            Type = "شحن خلال 15 يوم"
                        });
                });

            modelBuilder.Entity("ShippingSystem.Models.WeightSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ExtraWeightCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("WeightSetting");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 5m,
                            ExtraWeightCost = 5m,
                            Weight = 10m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShippingSystem.Models.City", b =>
                {
                    b.HasOne("ShippingSystem.Models.Governorate", "Governorate")
                        .WithMany()
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governorate");
                });

            modelBuilder.Entity("ShippingSystem.Models.Order", b =>
                {
                    b.HasOne("ShippingSystem.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShippingSystem.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShippingSystem.Models.Governorate", "Governorate")
                        .WithMany()
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShippingSystem.Models.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShippingSystem.Models.OrderType", "OrderType")
                        .WithMany()
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShippingSystem.Models.PaymentType", "PaymentType")
                        .WithOne("Order")
                        .HasForeignKey("ShippingSystem.Models.Order", "PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShippingSystem.Models.ShippingType", "ShippingType")
                        .WithOne("Order")
                        .HasForeignKey("ShippingSystem.Models.Order", "ShippingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("City");

                    b.Navigation("Governorate");

                    b.Navigation("OrderStatus");

                    b.Navigation("OrderType");

                    b.Navigation("PaymentType");

                    b.Navigation("ShippingType");
                });

            modelBuilder.Entity("ShippingSystem.Models.Product", b =>
                {
                    b.HasOne("ShippingSystem.Models.Order", "Order")
                        .WithOne("Product")
                        .HasForeignKey("ShippingSystem.Models.Product", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ShippingSystem.Models.Order", b =>
                {
                    b.Navigation("Product")
                        .IsRequired();
                });

            modelBuilder.Entity("ShippingSystem.Models.PaymentType", b =>
                {
                    b.Navigation("Order")
                        .IsRequired();
                });

            modelBuilder.Entity("ShippingSystem.Models.ShippingType", b =>
                {
                    b.Navigation("Order")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
