using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using ShippingSystem.Models;

namespace ShippingSystem.Data
{
    public class ApplicationDbContext : IdentityDbContext<IdentityUser>
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
            : base(options)
        {
        }
		
		protected override void OnModelCreating(ModelBuilder builder)
        {
            base.OnModelCreating(builder);
            builder.Entity<IdentityUser>().HasData(new IdentityUser
            {
                Id = "2e2f1bdd-7c0b-4854-add0-ab8eec66bc23",
                UserName = "employee@employee.com",
                NormalizedUserName = "employee@employee.com".ToUpper(),
                Email = "employee@employee.com",
                NormalizedEmail = "employee@employee.com".ToUpper(),
                EmailConfirmed = false,
                PasswordHash = "AQAAAAEAACcQAAAAEHSQM1qAccg8Yf1d+msuWKVKCkVWk81L0zXkwZio+rZcaBlz9fCJU+PqKv5SbJbmDQ==",
                SecurityStamp = "HEEVJ4ANMTAJLV57S7ITEKAF2FHIIWBJ",
                ConcurrencyStamp = "6b4a34d3-3a3b-4814-bca0-48799fa1aa6c",
                PhoneNumber = null,
                PhoneNumberConfirmed = false,
                TwoFactorEnabled = false,
                LockoutEnabled = true,
                LockoutEnd = null,
                AccessFailedCount = 0
            }, new IdentityUser
            {
                Id = "acc1915e-bb86-43d6-b34d-78eb7c128a00",
                UserName = "merchant@merchant.com",
                NormalizedUserName = "merchant@merchant.com".ToUpper(),
                Email = "merchant@merchant.com",
                NormalizedEmail = "merchant@merchant.com".ToUpper(),
                EmailConfirmed = false,
                PasswordHash = "AQAAAAEAACcQAAAAECQo2ErqmLbFIrLeowLZXNPN+tNnwS7Ddn8xWxzhzHA+wpuFCjjpuIPh0QNLcJSU3g==",
                SecurityStamp = "2F2KBRLNAE2TKEP3OFJU3N5CBX4QM537",
                ConcurrencyStamp = "43913d3f-e2df-4956-818c-79506ec9e7d4",
                PhoneNumber = null,
                PhoneNumberConfirmed = false,
                TwoFactorEnabled = false,
                LockoutEnabled = true,
                LockoutEnd = null,
                AccessFailedCount = 0
            });
            builder.Entity<IdentityRole>().HasData(new IdentityRole
            {
                Id = "782b3d14-193f-41eb-9ee6-073bece4d59a",
                Name = "Merchant",
                ConcurrencyStamp = "71d18d22-856c-4434-8e40-2d63a45102b8",
                NormalizedName = "MERCHANT"
            }, new IdentityRole
            {
                Id = "98a82c8a-1d51-41c0-b17e-734e7822304d",
                Name = "Employee",
                ConcurrencyStamp = "fedc935e-ad0f-4761-a006-7983b0646f0f",
                NormalizedName = "EMPLOYEE"
            });
            builder.Entity<Branch>().HasData(new Branch()
            {
                Id = 1,
                AddingDate = DateTime.Now,
                BranchName = "المنوفية",
                IsActive = true
            }, new Branch
            {
                Id = 2,
                AddingDate = DateTime.Now,
                BranchName = "القاهرة",
                IsActive = true
            });
            builder.Entity<OrderType>().HasData(new OrderType()
            {
                Id = 1,
                OrderTypeName = "التسليم في الفرع"
            }, new OrderType
            {
                Id = 2,
                OrderTypeName = "التسليم عند التاجر"
            });
            builder.Entity<Governorate>().HasData(new Governorate
            {
                Id = 1,
                GovernorateName = "المنوفية",
                IsActive = true
            }, new Governorate
            {
                Id = 2,
                GovernorateName = "القاهرة",
                IsActive = true
            });
            builder.Entity<City>().HasData(new City()
            {
                Id = 1,
                CityName = "شبين الكوم",
                GovernorateId = 1,
                NormalCostShipping = 10,
                PickUpCostShipping = 10
            }, new City
            {
                Id = 2,
                CityName = "الاميرية",
                GovernorateId = 2,
                NormalCostShipping = 10,
                PickUpCostShipping = 10
            });
            builder.Entity<OrderStatus>().HasData(new OrderStatus
            {
                Id = 1,
                CountStatus = 0,
                StatusName = "جديد"
            }, new OrderStatus
            {
                Id = 2,
                CountStatus = 0,
                StatusName = "قيد الانتظار"
            }, new OrderStatus
            {
                Id = 3,
                CountStatus = 0,
                StatusName = "تم التسليم للمندوب"
            }, new OrderStatus
            {
                Id = 4,
                CountStatus = 0,
                StatusName = "تم التسليم"
            }, new OrderStatus
            {
                Id = 5,
                CountStatus = 0,
                StatusName = "لا يمكن الوصول"
            }, new OrderStatus
            {
                Id = 6,
                CountStatus = 0,
                StatusName = "تم التأجيل"
            }, new OrderStatus
            {
                Id = 7,
                CountStatus = 0,
                StatusName = "تم التسليم جزئيا"
            }, new OrderStatus
            {
                Id = 8,
                CountStatus = 0,
                StatusName = "تم الالغاء من قبل المستلم"
            }, new OrderStatus
            {
                Id = 9,
                CountStatus = 0,
                StatusName = "تم الرفض مع الدفع"
            }, new OrderStatus
            {
                Id = 10,
                CountStatus = 0,
                StatusName = "رفض مع سداد جزء"
            }, new OrderStatus
            {
                Id = 11,
                CountStatus = 0,
                StatusName = "رفض و لم يتم الدفع"
            });
            builder.Entity<PaymentType>().HasData(new PaymentType
            {
                Id = 1,
                Type = "واجبة التحصيل"
            }, new PaymentType
            {
                Id = 2,
                Type = "دفع مقدم"
            }, new PaymentType
            {
                Id = 3,
                Type = "طرد مقابل طرد"
            });
            builder.Entity<ShippingType>().HasData(new ShippingType
            {
                Id = 1,
                Type = "شحن عادي"
            }, new ShippingType
            {
                Id = 2,
                Type = "شحن في 24 ساعة"
            }, new ShippingType
            {
                Id = 3,
                Type = "شحن خلال 15 يوم"
            });
            builder.Entity<Order>().HasData(new Order()
            {
                Id = 1,
                BranchId = 1,
                TotalWeight = 0.0f,
                CityId = 1,
                CompanyValue = 0,
                CustomerName = "mahmoud",
                Email = "m@me.com",
                FirstPhone = "010106171222",
                GovernorateId = 1,
                IsVillage = false,
                MerchantAddress = "address",
                MerchantPhone = "12321312",
                Notes = null,
                OrderCost = 0,
                OrderDate = DateTime.Now,
                OrderStatusId = 1,
                OrderTypeId = 1,
                PaidShippingValue = 0,
                PaymentTypeId = 1,
                RecievedAmount = 0,
                SecondPhone = null,
                ShippingCost = 0,
                ShippingTypeId = 1,
                StreetAndVillage = "menouf"
            });
            builder.Entity<Product>().HasData(new Product
            {
                Id = 1,
                OrderId = 1,
                ProductName = "new product",
                ProductWeight = 20.5f,
                Quantity = 5
            });
            builder.Entity<WeightSettings>().HasData(new WeightSettings
            {
                Id = 1,
                Cost = 5,
                ExtraWeightCost = 5,
                Weight = 10
            });
        }

        public DbSet<Order> Order { get; set; }
        public DbSet<Product> Product { get; set; }
        public DbSet<OrderStatus> OrderStatus { get; set; }
        public DbSet<PaymentType> PaymentType { get; set; }
        public DbSet<ShippingType> ShippingType { get; set; }
        public DbSet<OrderType> OrderType { get; set; }
        public DbSet<Governorate> Governorate { get; set; }
        public DbSet<Branch> Branch { get; set; }
        public DbSet<City> City { get; set; }
        public DbSet<WeightSettings> WeightSetting { get; set; }

    }
}